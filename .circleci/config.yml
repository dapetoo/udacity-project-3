version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Delete S3 content
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive
            exit 0
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-stack-${CIRCLE_WORKFLOW_ID:0:5}
            aws cloudformation delete-stack --stack-name frontend-stack-${CIRCLE_WORKFLOW_ID:0:5}
            exit 0

jobs:

  build_frontend:
    docker:
      - image: cimg/node:16.9.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          channel: notification_channel
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: notification_channel
          template: basic_success_1

  build_backend:
    docker:
      - image: cimg/node:16.9.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          channel: notification_channel
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: notification_channel
          template: basic_success_1

  test_frontend:
    docker:
      - image: cimg/node:16.9.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend Unit Test
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          event: fail
          channel: notification_channel
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: notification_channel
          template: basic_success_1

  test_backend:
    docker:
      - image: cimg/node:16.9.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend Unit Test
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          event: fail
          channel: notification_channel
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: notification_channel
          template: basic_success_1

  scan-frontend:
    docker:
      - image: cimg/node:16.9.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend Code Scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          channel: notification_channel
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: notification_channel
          template: basic_success_1

  scan_backend:
    docker:
      - image: cimg/node:16.9.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend Code Scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          channel: notification_channel
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: notification_channel
          template: basic_success_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Install tar, gzip, git
          command: yum -y install tar gzip git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:5} \
              --stack-name backend-stack-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:5} 

      - run:
          name: Ensure front-end infrastructure exists
          command: |
            # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:5} \
              --stack-name frontend-stack-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:5} 

      - run: 
          name: Add the EC2 instance IP to the Ansible inventory
          command: | 
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
            --output text >> ~/project/.circleci/ansible/inventory.txt

      - run:
          name: View the content of the inventory file
          command: cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
      - image: python:alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['98:2d:44:fe:8d:09:89:8f:9d:3c:6a:30:c4:57:5f:06']
      - attach_workspace:
          at: ~/ 
      
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssh-client
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli

      - run:
          name: Configure server using Ansible
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
workflows:
  default:
    jobs:
      - build_frontend
      - build_backend
      - test_frontend:
          requires: [build_frontend]
      - test_backend:
          requires: [build_backend]
      - scan-frontend:
          requires: [build_frontend]
      - scan_backend:
          requires: [build_backend]
      - deploy-infrastructure
      - configure-infrastructure
