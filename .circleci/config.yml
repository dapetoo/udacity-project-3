version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Delete S3 content
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive
            exit 0
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-stack-${CIRCLE_WORKFLOW_ID:0:5}
            aws cloudformation delete-stack --stack-name frontend-stack-${CIRCLE_WORKFLOW_ID:0:5}
            exit 0

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:5}
    steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
                SUCCESS=$(curl --insecure  https://kvdb.io/EUAJuVP5WS2Xs3i5N5Tsp4/migration_<< parameters.Workflow_ID >>)
                # Logic for reverting the database state
                if (( $SUCCESS == 1 ));
                then
                  cd ~/project/backend
                  npm install
                  npm run migration:revert
                fi

jobs:
  build_frontend:
    docker:
      - image: cimg/node:16.9.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          channel: notification_channel
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: notification_channel
          template: basic_success_1

  build_backend:
    docker:
      - image: cimg/node:16.9.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          channel: notification_channel
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: notification_channel
          template: basic_success_1

  test_frontend:
    docker:
      - image: cimg/node:16.9.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend Unit Test
          command: |
            cd frontend
            npm install
            npm test
      - slack/notify:
          event: fail
          channel: notification_channel
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: notification_channel
          template: basic_success_1

  test_backend:
    docker:
      - image: cimg/node:16.9.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend Unit Test
          command: |
            cd backend
            npm install
            npm test
      - slack/notify:
          event: fail
          channel: notification_channel
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: notification_channel
          template: basic_success_1

  scan_frontend:
    docker:
      - image: cimg/node:16.9.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend Code Scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          channel: notification_channel
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: notification_channel
          template: basic_success_1

  scan_backend:
    docker:
      - image: cimg/node:16.9.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend Code Scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          channel: notification_channel
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: notification_channel
          template: basic_success_1

  deploy_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar, gzip, git
          command: yum -y install tar gzip git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:5} \
              --stack-name backend-stack-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:5}

      - run:
          name: Ensure front-end infrastructure exists
          command: |
            # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:5} \
              --stack-name frontend-stack-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:5}

      - run:
          name: Add the EC2 instance IP to the Ansible inventory
          command: |
            aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
                --output text >> ~/project/.circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment

  configure_infrastructure:
    docker:
      - image: python:alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["98:2d:44:fe:8d:09:89:8f:9d:3c:6a:30:c4:57:5f:06"]
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssh-client
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli

      - run:
          name: Configure server using Ansible
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
                # echo ENVIRONMENT=production > "backend/.env"
                # echo TYPEORM_CONNECTION=postgres >> "backend/.env"
                # echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
                # echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
                # echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
                # echo NODE_ENV=production >> "backend/.env"
                # echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
                # echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
                # echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
                # echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
                # echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
                # cat backend/.env
      - destroy-environment
  
  run_migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: prepare environment for backend build
          command: |
            echo "Preparing environment for backend build"
            echo ENVIRONMENT=$ENVIRONMENT >> backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/EUAJuVP5WS2Xs3i5N5Tsp4/migration_${CIRCLE_WORKFLOW_ID:0:5}  -d '1'
            fi
    #Rollback on failure      
      - destroy-environment
      - revert-migrations

  deploy_frontend:
    docker:
      - image: python:alpine3.16
    steps:
      - checkout
      # - restore_cache:
      #     keys: [frontend-build]
      - attach_workspace:
          at: ~/

      - run:
          name: Install image dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli

      - run:
          name: Install app dependencies
          command: |
            cd frontend
            npm install

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}")
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            echo ENVIRONMENT=production > "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
            cat frontend/.env
            echo "${API_URL}"

      - run:
          name: Deploy frontend objects to s3
          command: |
            cd frontend
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:5}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive
      - revert-migrations
      - destroy-environment

  deploy_backend:
    docker:
      - image: python:alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["98:2d:44:fe:8d:09:89:8f:9d:3c:6a:30:c4:57:5f:06"]
      - attach_workspace:
          at: ~/
      # - restore_cache:
      #     keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssh-client tar gzip curl nodejs npm
            pip install awscli
      - run:
          name: Install backend dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt deploy-backend.yml
      # - run:
      #     name: Deploy backend
      #     no_output_timeout: 30m
      #     command: |
      #       echo ENVIRONMENT=production >> "backend/.env"
      #       echo TYPEORM_CONNECTION=postgres >> "backend/.env"
      #       echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
      #       echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
      #       echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
      #       echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
      #       echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
      #       echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
      #       echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
      #       echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      #       cat backend/.env

      #       tar -C backend -czvf artifact.tar.gz .
      #       ls -la

      #       cd .circleci/ansible
      #       cat inventory.txt
      #       export ANSIBLE_HOST_KEY_CHECKING=False
      #       ansible-playbook -i inventory.txt deploy-backend.yml

      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      - image: python:alpine3.16
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install image dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli

      - run:
          name: Get backend url and perform smoke test on the backend server
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API URL: ${API_URL}"
            echo "Wait for backend to become available..."
            sleep 60s
            echo "Attempting to reach backend..."
            if curl "${API_URL}/api/status" | grep "ok"
            then
              echo "Backend status OK"
              exit 0
            else
              echo "Backend status NOT OK"
              exit 1
            fi

      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:5}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi

      - destroy-environment
      - revert-migrations

  cloudfront_update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/EUAJuVP5WS2Xs3i5N5Tsp4/old_workflow_id -d "${OLD_WORKFLOW_ID}"

      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name cloudfront-stack-${CIRCLE_WORKFLOW_ID:0:5} \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:5}" \
            --tags project=udapeople
      - destroy-environment
      - revert-migrations
  
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo "OldWorkflowID: ${OldWorkflowID}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo "${STACKS}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "start clean up"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi 
      - revert-migrations
      - destroy-environment

workflows:
  default:
    jobs:
      - build_frontend
      - build_backend
      - test_frontend:
          requires: [build_frontend]
      - test_backend:
          requires: [build_backend]
      - scan_backend:
          requires: [build_backend]
      - scan_frontend:
          requires: [build_frontend]
      - deploy_infrastructure:
          requires: [test_frontend, test_backend, scan_frontend, scan_backend]
          filters:
            branches:
              only: [main]
      - configure_infrastructure:
          requires: [deploy_infrastructure]
      - run_migrations:
          requires: [configure_infrastructure]
      - deploy_frontend:
          requires: [run_migrations]
      - deploy_backend:
          requires: [run_migrations]
      - smoke-test:
          requires: [deploy_backend, deploy_frontend]
      - cloudfront_update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront_update] 